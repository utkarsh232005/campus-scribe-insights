import React, { useState, useEffect } from 'react';
import { UserProfile } from '@/types/user';
import { toast } from '@/components/ui/use-toast';
import DashboardLayout from '@/components/layout/DashboardLayout';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { 
  Users, 
  Award, 
  School, 
  BookOpen, 
  FilePen, 
  Activity,
  ArrowUpRight,
  Calendar,
  TrendingUp,
  Clock,
  UserPlus,
  FileText,
  RefreshCw
} from 'lucide-react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { ChartGrid } from '@/components/charts/ChartGrid';
import { ChartCard } from '@/components/charts/ChartCard';
import { LineChart } from '@/components/charts/LineChart';
import { BarChart } from '@/components/charts/BarChart';
import { AreaChart } from '@/components/charts/AreaChart';
import { DonutChart } from '@/components/charts/DonutChart';
import { getMonthlyStats } from '@/lib/stats';
import { supabase } from '@/integrations/supabase/client';
import StatisticCard from '@/components/dashboard/StatisticCard';

interface DashboardStats {
  totalUsers: number;
  totalAwards: number;
  totalFaculty: number;
  totalReports: number;
  recentUsers: UserProfile[];
  pendingReports: number;
  monthlyStats: Array<{
    month: string;
    users: number;
    reports: number;
    awards: number;
  }>;
}

const AdminDashboard = () => {
  const [stats, setStats] = useState<DashboardStats>({
    totalUsers: 0,
    totalAwards: 0,
    totalFaculty: 0,
    totalReports: 0,
    recentUsers: [],
    pendingReports: 0,
    monthlyStats: []
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  useEffect(() => {
    const fetchStats = async () => {
      setLoading(true);
      try {
        // Fetch monthly stats
        const monthlyStats = await getMonthlyStats(12);
        
        // Get the latest month's data for the summary
        const { count: facultyCount } = await supabase
          .from('faculty')
          .select('*', { count: 'exact', head: true });
        
        // Fetch pending reports count
        const { count: pendingCount } = await supabase
          .from('reports')
          .select('*', { count: 'exact', head: true })
          .eq('status', 'pending');
        
        // Fetch recent users (limit 5)
        const { data: recentUsers } = await supabase
          .from('profiles')
          .select('*')
          .order('created_at', { ascending: false })
          .limit(5);
        
        if (recentUsers) {
          setStats(prev => ({
            ...prev,
            totalUsers: monthlyStats[0]?.users || 0,
            totalAwards: monthlyStats[0]?.awards || 0,
            totalReports: monthlyStats[0]?.reports || 0,
            totalFaculty: facultyCount || 0,
            pendingReports: pendingCount || 0,
            recentUsers: recentUsers.map((user: any) => ({
              id: user.id,
              email: user.email || '',
              department: user.department || 'N/A',
              created_at: user.created_at,
              last_sign_in_at: user.last_sign_in_at || null,
              isAdmin: false
            })),
            monthlyStats: monthlyStats || []
          }));
        }
        
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
        setError('Failed to load dashboard data');
      } finally {
        setLoading(false);
      }
    };
    
    fetchStats();
  }, []);

  // Prepare chart data from monthly stats
  const chartData = React.useMemo(() => {
    const lastSixMonths = [...stats.monthlyStats].slice(0, 6).reverse();
    
    const labels = lastSixMonths.length > 0 
      ? lastSixMonths.map(stat => 
          new Date(stat.month).toLocaleString('default', { month: 'short' })
        )
      : ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];
    
    const userData = lastSixMonths.length > 0
      ? lastSixMonths.map(stat => stat.users)
      : [42, 43, 45, 48, 50, 55];
    
    const reportData = lastSixMonths.length > 0
      ? lastSixMonths.map(stat => stat.reports)
      : [10, 12, 15, 18, 20, 25];
      
    const awardData = lastSixMonths.length > 0
      ? lastSixMonths.map(stat => stat.awards)
      : [2, 3, 4, 5, 7, 8];
    
    return { labels, userData, reportData, awardData };
  }, [stats.monthlyStats]);

  return (
    <DashboardLayout>
      {/* Analytics Summary Cards */}
      <div className="container mx-auto p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold text-zinc-50">Dashboard Overview</h2>
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => window.location.reload()} 
            disabled={loading}
            className="text-sm bg-gray-800 border-gray-700 hover:bg-gray-700 text-gray-300"
          >
            <RefreshCw className="mr-2 h-4 w-4" />
            Refresh Data
          </Button>
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <StatisticCard
            title="Total Users"
            value={loading ? '...' : stats.totalUsers}
            icon={<Users className="h-6 w-6 text-white" />}
            variant="primary"
            hover="glow"
            trend={{
              value: "+12%",
              direction: "up",
              label: "vs last month"
            }}
            onClick={() => window.location.href = '/admin/users'}
          />
          
          <StatisticCard
            title="Faculty Members"
            value={loading ? '...' : stats.totalFaculty}
            icon={<School className="h-6 w-6 text-white" />}
            variant="purple"
            hover="pulse"
            trend={{
              value: "+5%",
              direction: "up",
              label: "vs last month"
            }}
            onClick={() => window.location.href = '/admin/faculty'}
          />
          
          <StatisticCard
            title="Total Reports"
            value={loading ? '...' : stats.totalReports}
            icon={<FileText className="h-6 w-6 text-white" />}
            variant="emerald"
            hover="intense"
            trend={{
              value: stats.pendingReports > 0 ? `${stats.pendingReports} pending` : "All approved",
              direction: stats.pendingReports > 0 ? "neutral" : "up"
            }}
            onClick={() => window.location.href = '/admin/reports'}
          />
          
          <StatisticCard
            title="Awards & Honors"
            value={loading ? '...' : stats.totalAwards}
            icon={<Award className="h-6 w-6 text-white" />}
            variant="amber"
            hover="default"
            trend={{
              value: "+8%",
              direction: "up",
              label: "vs last year"
            }}
            onClick={() => window.location.href = '/admin/awards'}
          />
        </div>
        
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {/* Recent Activity Card */}
          <Card className="lg:col-span-2 bg-gray-900/40 border-gray-800 shadow-xl">
            <CardHeader>
              <CardTitle className="text-lg font-medium text-zinc-50 flex items-center">
                <Activity className="mr-2 h-5 w-5 text-blue-500" />
                Recent Activity
              </CardTitle>
              <CardDescription className="text-gray-400">
                Platform activity from the last 30 days
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {/* User Signups */}
                <div className="flex items-center justify-between p-3 bg-gray-800/50 rounded-lg border border-gray-800/50 hover:bg-gray-800/70 transition-colors">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 rounded-full bg-blue-600/20 flex items-center justify-center">
                      <UserPlus className="h-5 w-5 text-blue-500" />
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-zinc-100">New User Signups</h4>
                      <p className="text-xs text-gray-400">Last 30 days</p>
                    </div>
                  </div>
                  <div className="text-lg font-bold text-zinc-50">{loading ? '...' : 28}</div>
                </div>
                
                {/* Reports Submitted */}
                <div className="flex items-center justify-between p-3 bg-gray-800/50 rounded-lg border border-gray-800/50 hover:bg-gray-800/70 transition-colors">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 rounded-full bg-emerald-600/20 flex items-center justify-center">
                      <FilePen className="h-5 w-5 text-emerald-500" />
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-zinc-100">Reports Submitted</h4>
                      <p className="text-xs text-gray-400">Last 30 days</p>
                    </div>
                  </div>
                  <div className="text-lg font-bold text-zinc-50">{loading ? '...' : stats.totalReports}</div>
                </div>
                
                {/* Awards Given */}
                <div className="flex items-center justify-between p-3 bg-gray-800/50 rounded-lg border border-gray-800/50 hover:bg-gray-800/70 transition-colors">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 rounded-full bg-amber-600/20 flex items-center justify-center">
                      <Award className="h-5 w-5 text-amber-500" />
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-zinc-100">Awards Given</h4>
                      <p className="text-xs text-gray-400">Last 30 days</p>
                    </div>
                  </div>
                  <div className="text-lg font-bold text-zinc-50">{loading ? '...' : stats.totalAwards}</div>
                </div>
                
                {/* Recent Logins */}
                <div className="flex items-center justify-between p-3 bg-gray-800/50 rounded-lg border border-gray-800/50 hover:bg-gray-800/70 transition-colors">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 rounded-full bg-purple-600/20 flex items-center justify-center">
                      <Clock className="h-5 w-5 text-purple-500" />
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-zinc-100">Active Users</h4>
                      <p className="text-xs text-gray-400">Last 7 days</p>
                    </div>
                  </div>
                  <div className="text-lg font-bold text-zinc-50">{loading ? '...' : Math.floor(stats.totalUsers * 0.7)}</div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          {/* Recent Users Card */}
          <Card className="bg-gray-900/40 border-gray-800 shadow-xl">
            <CardHeader>
              <CardTitle className="text-lg font-medium text-zinc-50 flex items-center">
                <Users className="mr-2 h-5 w-5 text-blue-500" />
                Recent Users
              </CardTitle>
              <CardDescription className="text-gray-400">
                Latest registered faculty members
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {stats.recentUsers.length > 0 ? (
                  stats.recentUsers.slice(0, 5).map((user) => (
                    <motion.div
                      key={user.id}
                      whileHover={{ scale: 1.01 }}
                      className="flex items-center justify-between p-3 rounded-xl bg-gray-800/50 border border-gray-800/30 hover:bg-gray-800/80 transition-all duration-200 group"
                    >
                      <div className="flex items-center gap-3">
                        <div className="h-9 w-9 rounded-full bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center shadow-lg shadow-blue-500/20">
                          <span className="text-sm font-bold text-white uppercase">{user.department?.charAt(0) || '?'}</span>
                        </div>
                        <div>
                          <p className="text-sm font-medium text-zinc-100 capitalize">{user.department?.replace(/_/g, ' ') || 'Unknown'}</p>
                          <p className="text-xs text-gray-400 font-mono truncate max-w-[150px]">{user.email || 'unknown'}</p>
                        </div>
                      </div>
                      <div className="text-xs text-gray-500 font-mono">
                        {new Date(user.created_at).toLocaleDateString()}
                      </div>
                    </motion.div>
                  ))
                ) : (
                  <p className="text-gray-400 text-center py-4">No recent users found</p>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
      
      {/* Analytics Section */}
      <div className="container mx-auto p-6 pb-12">
        <h2 className="text-xl font-semibold text-zinc-50 mb-6">Analytics Overview</h2>
        <ChartGrid>
          <ChartCard title="User Growth" subtitle="Last 6 months">
            <LineChart 
              data={{
                labels: chartData.labels,
                values: chartData.userData
              }}
            />
          </ChartCard>
          <ChartCard title="Reports Submitted" subtitle="Monthly">
            <BarChart 
              data={{
                labels: chartData.labels,
                values: chartData.reportData
              }}
            />
          </ChartCard>
          <ChartCard title="Awards Distribution" subtitle="By Department">
            <DonutChart 
              data={{
                labels: ['Engineering', 'Science', 'Arts', 'Business', 'Health'],
                values: [35, 25, 20, 15, 5]
              }}
            />
          </ChartCard>
          <ChartCard title="Activity Trend" subtitle="Daily">
            <AreaChart 
              data={{
                labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                values: [30, 40, 35, 50, 49, 20, 10]
              }}
            />
          </ChartCard>
        </ChartGrid>
      </div>
    </DashboardLayout>
  );
};

export default AdminDashboard;
